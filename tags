!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/kidpixo/Documents/work/MERTIS/MERTIS_Ground-Reference-Model_GRM_local/ArduinoModbus/	//
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
SECRET_SSID	examples/TCP/WiFiModbusClientToggle/arduino_secrets.h	/^#define SECRET_SSID /;"	d
SECRET_PASS	examples/TCP/WiFiModbusClientToggle/arduino_secrets.h	/^#define SECRET_PASS /;"	d
SECRET_SSID	examples/TCP/WiFiModbusServerLED/arduino_secrets.h	/^#define SECRET_SSID /;"	d
SECRET_PASS	examples/TCP/WiFiModbusServerLED/arduino_secrets.h	/^#define SECRET_PASS /;"	d
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_KIND_DESCRIPTION!JavaProperties	k,key	/keys/
!_TAG_PARSER_VERSION!JavaProperties	0.0	/current.age/
name	library.properties	/^name=ArduinoModbus$/;"	k
version	library.properties	/^version=1.0.8$/;"	k
author	library.properties	/^author=Arduino$/;"	k
maintainer	library.properties	/^maintainer=Arduino <info@arduino.cc>$/;"	k
sentence	library.properties	/^sentence=Use Modbus equipment with your Arduino.$/;"	k
paragraph	library.properties	/^paragraph=Using TCP or RS485 shields, like the MKR 485 Shield. This library depends on the Ardui/;"	k
category	library.properties	/^category=Communication$/;"	k
url	library.properties	/^url=https:\/\/www.arduino.cc\/en\/ArduinoModbus\/ArduinoModbus$/;"	k
architectures	library.properties	/^architectures=megaavr,samd,mbed_nano,mbed_portenta,mbed_opta$/;"	k
includes	library.properties	/^includes=ArduinoModbus.h$/;"	k
depends	library.properties	/^depends=ArduinoRS485$/;"	k
!_TAG_KIND_DESCRIPTION!Asciidoc	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Asciidoc	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Asciidoc	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Asciidoc	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Asciidoc	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Asciidoc	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Asciidoc	a,anchor	/anchors/
!_TAG_PARSER_VERSION!Asciidoc	0.0	/current.age/
Modbus Library for Arduino	README.adoc	/^= Modbus Library for Arduino =$/;"	c
Useful resources	README.adoc	/^== Useful resources ==$/;"	s	chapter:Modbus Library for Arduino
License	README.adoc	/^== License ==$/;"	s	chapter:Modbus Library for Arduino
_ARDUINO_MODBUS_H_INCLUDED	src/ArduinoModbus.h	/^#define _ARDUINO_MODBUS_H_INCLUDED$/;"	d
_MODBUS_RTU_CLIENT_H_INCLUDED	src/ModbusRTUClient.h	/^#define _MODBUS_RTU_CLIENT_H_INCLUDED$/;"	d
ModbusRTUClientClass	src/ModbusRTUClient.h	/^class ModbusRTUClientClass : public ModbusClient {$/;"	c
_rs485	src/ModbusRTUClient.h	/^  RS485Class* _rs485 = &RS485;$/;"	m	class:ModbusRTUClientClass	typeref:typename:RS485Class *
ModbusClient	src/ModbusClient.cpp	/^ModbusClient::ModbusClient(unsigned long defaultTimeout) :$/;"	f	class:ModbusClient
~ModbusClient	src/ModbusClient.cpp	/^ModbusClient::~ModbusClient()$/;"	f	class:ModbusClient
begin	src/ModbusClient.cpp	/^int ModbusClient::begin(modbus_t* mb, int defaultId)$/;"	f	class:ModbusClient	typeref:typename:int
end	src/ModbusClient.cpp	/^void ModbusClient::end()$/;"	f	class:ModbusClient	typeref:typename:void
coilRead	src/ModbusClient.cpp	/^int ModbusClient::coilRead(int address)$/;"	f	class:ModbusClient	typeref:typename:int
coilRead	src/ModbusClient.cpp	/^int ModbusClient::coilRead(int id, int address)$/;"	f	class:ModbusClient	typeref:typename:int
discreteInputRead	src/ModbusClient.cpp	/^int ModbusClient::discreteInputRead(int address)$/;"	f	class:ModbusClient	typeref:typename:int
discreteInputRead	src/ModbusClient.cpp	/^int ModbusClient::discreteInputRead(int id, int address)$/;"	f	class:ModbusClient	typeref:typename:int
holdingRegisterRead	src/ModbusClient.cpp	/^long ModbusClient::holdingRegisterRead(int address)$/;"	f	class:ModbusClient	typeref:typename:long
holdingRegisterRead	src/ModbusClient.cpp	/^long ModbusClient::holdingRegisterRead(int id, int address)$/;"	f	class:ModbusClient	typeref:typename:long
inputRegisterRead	src/ModbusClient.cpp	/^long ModbusClient::inputRegisterRead(int address)$/;"	f	class:ModbusClient	typeref:typename:long
inputRegisterRead	src/ModbusClient.cpp	/^long ModbusClient::inputRegisterRead(int id, int address)$/;"	f	class:ModbusClient	typeref:typename:long
coilWrite	src/ModbusClient.cpp	/^int ModbusClient::coilWrite(int address, uint8_t value)$/;"	f	class:ModbusClient	typeref:typename:int
coilWrite	src/ModbusClient.cpp	/^int ModbusClient::coilWrite(int id, int address, uint8_t value)$/;"	f	class:ModbusClient	typeref:typename:int
holdingRegisterWrite	src/ModbusClient.cpp	/^int ModbusClient::holdingRegisterWrite(int address, uint16_t value)$/;"	f	class:ModbusClient	typeref:typename:int
holdingRegisterWrite	src/ModbusClient.cpp	/^int ModbusClient::holdingRegisterWrite(int id, int address, uint16_t value)$/;"	f	class:ModbusClient	typeref:typename:int
registerMaskWrite	src/ModbusClient.cpp	/^int ModbusClient::registerMaskWrite(int address, uint16_t andMask, uint16_t orMask)$/;"	f	class:ModbusClient	typeref:typename:int
registerMaskWrite	src/ModbusClient.cpp	/^int ModbusClient::registerMaskWrite(int id, int address, uint16_t andMask, uint16_t orMask)$/;"	f	class:ModbusClient	typeref:typename:int
beginTransmission	src/ModbusClient.cpp	/^int ModbusClient::beginTransmission(int type, int address, int nb)$/;"	f	class:ModbusClient	typeref:typename:int
beginTransmission	src/ModbusClient.cpp	/^int ModbusClient::beginTransmission(int id, int type, int address, int nb)$/;"	f	class:ModbusClient	typeref:typename:int
write	src/ModbusClient.cpp	/^int ModbusClient::write(unsigned int value)$/;"	f	class:ModbusClient	typeref:typename:int
endTransmission	src/ModbusClient.cpp	/^int ModbusClient::endTransmission()$/;"	f	class:ModbusClient	typeref:typename:int
requestFrom	src/ModbusClient.cpp	/^int ModbusClient::requestFrom(int type, int address, int nb)$/;"	f	class:ModbusClient	typeref:typename:int
requestFrom	src/ModbusClient.cpp	/^int ModbusClient::requestFrom(int id, int type, int address, int nb)$/;"	f	class:ModbusClient	typeref:typename:int
available	src/ModbusClient.cpp	/^int ModbusClient::available()$/;"	f	class:ModbusClient	typeref:typename:int
read	src/ModbusClient.cpp	/^long ModbusClient::read()$/;"	f	class:ModbusClient	typeref:typename:long
lastError	src/ModbusClient.cpp	/^const char* ModbusClient::lastError()$/;"	f	class:ModbusClient	typeref:typename:const char *
setTimeout	src/ModbusClient.cpp	/^void ModbusClient::setTimeout(unsigned long ms)$/;"	f	class:ModbusClient	typeref:typename:void
_MODBUS_SERVER_H_INCLUDED	src/ModbusServer.h	/^#define _MODBUS_SERVER_H_INCLUDED$/;"	d
ModbusServer	src/ModbusServer.h	/^class ModbusServer {$/;"	c
_mb	src/ModbusServer.h	/^  modbus_t* _mb;$/;"	m	class:ModbusServer	typeref:typename:modbus_t *
_mbMapping	src/ModbusServer.h	/^  modbus_mapping_t _mbMapping;$/;"	m	class:ModbusServer	typeref:typename:modbus_mapping_t
ModbusRTUServerClass	src/ModbusRTUServer.cpp	/^ModbusRTUServerClass::ModbusRTUServerClass()$/;"	f	class:ModbusRTUServerClass
ModbusRTUServerClass	src/ModbusRTUServer.cpp	/^ModbusRTUServerClass::ModbusRTUServerClass(RS485Class& rs485) : _rs485(&rs485)$/;"	f	class:ModbusRTUServerClass
~ModbusRTUServerClass	src/ModbusRTUServer.cpp	/^ModbusRTUServerClass::~ModbusRTUServerClass()$/;"	f	class:ModbusRTUServerClass
begin	src/ModbusRTUServer.cpp	/^int ModbusRTUServerClass::begin(int id, unsigned long baudrate, uint16_t config)$/;"	f	class:ModbusRTUServerClass	typeref:typename:int
begin	src/ModbusRTUServer.cpp	/^int ModbusRTUServerClass::begin(RS485Class& rs485, int id, unsigned long baudrate, uint16_t conf/;"	f	class:ModbusRTUServerClass	typeref:typename:int
poll	src/ModbusRTUServer.cpp	/^int ModbusRTUServerClass::poll()$/;"	f	class:ModbusRTUServerClass	typeref:typename:int
ModbusRTUServer	src/ModbusRTUServer.cpp	/^ModbusRTUServerClass ModbusRTUServer;$/;"	v	typeref:typename:ModbusRTUServerClass
ModbusTCPServer	src/ModbusTCPServer.cpp	/^ModbusTCPServer::ModbusTCPServer() :$/;"	f	class:ModbusTCPServer
~ModbusTCPServer	src/ModbusTCPServer.cpp	/^ModbusTCPServer::~ModbusTCPServer()$/;"	f	class:ModbusTCPServer
begin	src/ModbusTCPServer.cpp	/^int ModbusTCPServer::begin(int id)$/;"	f	class:ModbusTCPServer	typeref:typename:int
accept	src/ModbusTCPServer.cpp	/^void ModbusTCPServer::accept(Client& client)$/;"	f	class:ModbusTCPServer	typeref:typename:void
poll	src/ModbusTCPServer.cpp	/^int ModbusTCPServer::poll()$/;"	f	class:ModbusTCPServer	typeref:typename:int
_MODBUS_TCP_SERVER_H_INCLUDED	src/ModbusTCPServer.h	/^#define _MODBUS_TCP_SERVER_H_INCLUDED$/;"	d
ModbusTCPServer	src/ModbusTCPServer.h	/^class ModbusTCPServer : public ModbusServer {$/;"	c
_client	src/ModbusTCPServer.h	/^  Client* _client;$/;"	m	class:ModbusTCPServer	typeref:typename:Client *
_MODBUS_RTU_SERVER_H_INCLUDED	src/ModbusRTUServer.h	/^#define _MODBUS_RTU_SERVER_H_INCLUDED$/;"	d
ModbusRTUServerClass	src/ModbusRTUServer.h	/^class ModbusRTUServerClass : public ModbusServer {$/;"	c
_rs485	src/ModbusRTUServer.h	/^  RS485Class* _rs485 = &RS485;$/;"	m	class:ModbusRTUServerClass	typeref:typename:RS485Class *
_MODBUS_CLIENT_H_INCLUDED	src/ModbusClient.h	/^#define _MODBUS_CLIENT_H_INCLUDED$/;"	d
COILS	src/ModbusClient.h	/^#define COILS /;"	d
DISCRETE_INPUTS	src/ModbusClient.h	/^#define DISCRETE_INPUTS /;"	d
HOLDING_REGISTERS	src/ModbusClient.h	/^#define HOLDING_REGISTERS /;"	d
INPUT_REGISTERS	src/ModbusClient.h	/^#define INPUT_REGISTERS /;"	d
ModbusClient	src/ModbusClient.h	/^class ModbusClient {$/;"	c
_mb	src/ModbusClient.h	/^  modbus_t* _mb;$/;"	m	class:ModbusClient	typeref:typename:modbus_t *
_timeout	src/ModbusClient.h	/^  unsigned long _timeout;$/;"	m	class:ModbusClient	typeref:typename:unsigned long
_defaultId	src/ModbusClient.h	/^  int _defaultId;$/;"	m	class:ModbusClient	typeref:typename:int
_transmissionBegun	src/ModbusClient.h	/^  bool _transmissionBegun;$/;"	m	class:ModbusClient	typeref:typename:bool
_id	src/ModbusClient.h	/^  int _id;$/;"	m	class:ModbusClient	typeref:typename:int
_type	src/ModbusClient.h	/^  int _type;$/;"	m	class:ModbusClient	typeref:typename:int
_address	src/ModbusClient.h	/^  int _address;$/;"	m	class:ModbusClient	typeref:typename:int
_nb	src/ModbusClient.h	/^  int _nb;$/;"	m	class:ModbusClient	typeref:typename:int
_values	src/ModbusClient.h	/^  void* _values;$/;"	m	class:ModbusClient	typeref:typename:void *
_available	src/ModbusClient.h	/^  int _available;$/;"	m	class:ModbusClient	typeref:typename:int
_read	src/ModbusClient.h	/^  int _read;$/;"	m	class:ModbusClient	typeref:typename:int
_availableForWrite	src/ModbusClient.h	/^  int _availableForWrite;$/;"	m	class:ModbusClient	typeref:typename:int
_written	src/ModbusClient.h	/^  int _written;$/;"	m	class:ModbusClient	typeref:typename:int
ModbusTCPClient	src/ModbusTCPClient.cpp	/^ModbusTCPClient::ModbusTCPClient(Client& client) :$/;"	f	class:ModbusTCPClient
~ModbusTCPClient	src/ModbusTCPClient.cpp	/^ModbusTCPClient::~ModbusTCPClient()$/;"	f	class:ModbusTCPClient
begin	src/ModbusTCPClient.cpp	/^int ModbusTCPClient::begin(IPAddress ip, uint16_t port)$/;"	f	class:ModbusTCPClient	typeref:typename:int
connected	src/ModbusTCPClient.cpp	/^int ModbusTCPClient::connected()$/;"	f	class:ModbusTCPClient	typeref:typename:int
stop	src/ModbusTCPClient.cpp	/^void ModbusTCPClient::stop()$/;"	f	class:ModbusTCPClient	typeref:typename:void
_MODBUS_TCP_CLIENT_H_INCLUDED	src/ModbusTCPClient.h	/^#define _MODBUS_TCP_CLIENT_H_INCLUDED$/;"	d
ModbusTCPClient	src/ModbusTCPClient.h	/^class ModbusTCPClient : public ModbusClient {$/;"	c
_client	src/ModbusTCPClient.h	/^  Client* _client;$/;"	m	class:ModbusTCPClient	typeref:typename:Client *
ModbusServer	src/ModbusServer.cpp	/^ModbusServer::ModbusServer() :$/;"	f	class:ModbusServer
~ModbusServer	src/ModbusServer.cpp	/^ModbusServer::~ModbusServer()$/;"	f	class:ModbusServer
configureCoils	src/ModbusServer.cpp	/^int ModbusServer::configureCoils(int startAddress, int nb)$/;"	f	class:ModbusServer	typeref:typename:int
configureDiscreteInputs	src/ModbusServer.cpp	/^int ModbusServer::configureDiscreteInputs(int startAddress, int nb)$/;"	f	class:ModbusServer	typeref:typename:int
configureHoldingRegisters	src/ModbusServer.cpp	/^int ModbusServer::configureHoldingRegisters(int startAddress, int nb)$/;"	f	class:ModbusServer	typeref:typename:int
configureInputRegisters	src/ModbusServer.cpp	/^int ModbusServer::configureInputRegisters(int startAddress, int nb)$/;"	f	class:ModbusServer	typeref:typename:int
coilRead	src/ModbusServer.cpp	/^int ModbusServer::coilRead(int address)$/;"	f	class:ModbusServer	typeref:typename:int
discreteInputRead	src/ModbusServer.cpp	/^int ModbusServer::discreteInputRead(int address)$/;"	f	class:ModbusServer	typeref:typename:int
holdingRegisterRead	src/ModbusServer.cpp	/^long ModbusServer::holdingRegisterRead(int address)$/;"	f	class:ModbusServer	typeref:typename:long
inputRegisterRead	src/ModbusServer.cpp	/^long ModbusServer::inputRegisterRead(int address)$/;"	f	class:ModbusServer	typeref:typename:long
coilWrite	src/ModbusServer.cpp	/^int ModbusServer::coilWrite(int address, uint8_t value)$/;"	f	class:ModbusServer	typeref:typename:int
holdingRegisterWrite	src/ModbusServer.cpp	/^int ModbusServer::holdingRegisterWrite(int address, uint16_t value)$/;"	f	class:ModbusServer	typeref:typename:int
registerMaskWrite	src/ModbusServer.cpp	/^int ModbusServer::registerMaskWrite(int address, uint16_t andMask, uint16_t orMask)$/;"	f	class:ModbusServer	typeref:typename:int
discreteInputWrite	src/ModbusServer.cpp	/^int ModbusServer::discreteInputWrite(int address, uint8_t value)$/;"	f	class:ModbusServer	typeref:typename:int
writeDiscreteInputs	src/ModbusServer.cpp	/^int ModbusServer::writeDiscreteInputs(int address, uint8_t values[], int nb)$/;"	f	class:ModbusServer	typeref:typename:int
inputRegisterWrite	src/ModbusServer.cpp	/^int ModbusServer::inputRegisterWrite(int address, uint16_t value)$/;"	f	class:ModbusServer	typeref:typename:int
writeInputRegisters	src/ModbusServer.cpp	/^int ModbusServer::writeInputRegisters(int address, uint16_t values[], int nb)$/;"	f	class:ModbusServer	typeref:typename:int
begin	src/ModbusServer.cpp	/^int ModbusServer::begin(modbus_t* mb, int id)$/;"	f	class:ModbusServer	typeref:typename:int
end	src/ModbusServer.cpp	/^void ModbusServer::end()$/;"	f	class:ModbusServer	typeref:typename:void
ModbusRTUClientClass	src/ModbusRTUClient.cpp	/^ModbusRTUClientClass::ModbusRTUClientClass() :$/;"	f	class:ModbusRTUClientClass
ModbusRTUClientClass	src/ModbusRTUClient.cpp	/^ModbusRTUClientClass::ModbusRTUClientClass(RS485Class& rs485) :$/;"	f	class:ModbusRTUClientClass
~ModbusRTUClientClass	src/ModbusRTUClient.cpp	/^ModbusRTUClientClass::~ModbusRTUClientClass()$/;"	f	class:ModbusRTUClientClass
begin	src/ModbusRTUClient.cpp	/^int ModbusRTUClientClass::begin(unsigned long baudrate, uint16_t config)$/;"	f	class:ModbusRTUClientClass	typeref:typename:int
begin	src/ModbusRTUClient.cpp	/^int ModbusRTUClientClass::begin(RS485Class& rs485, unsigned long baudrate, uint16_t config)$/;"	f	class:ModbusRTUClientClass	typeref:typename:int
ModbusRTUClient	src/ModbusRTUClient.cpp	/^ModbusRTUClientClass ModbusRTUClient;$/;"	v	typeref:typename:ModbusRTUClientClass
printf	src/libmodbus/modbus-rtu.cpp	/^#define printf(/;"	d	file:
fprintf	src/libmodbus/modbus-rtu.cpp	/^#define fprintf(/;"	d	file:
EIO	src/libmodbus/modbus-rtu.cpp	/^#define EIO /;"	d	file:
EINVAL	src/libmodbus/modbus-rtu.cpp	/^#define EINVAL /;"	d	file:
ENOPROTOOPT	src/libmodbus/modbus-rtu.cpp	/^#define ENOPROTOOPT /;"	d	file:
ECONNREFUSED	src/libmodbus/modbus-rtu.cpp	/^#define ECONNREFUSED /;"	d	file:
ETIMEDOUT	src/libmodbus/modbus-rtu.cpp	/^#define ETIMEDOUT /;"	d	file:
ENOTSUP	src/libmodbus/modbus-rtu.cpp	/^#define ENOTSUP /;"	d	file:
table_crc_hi	src/libmodbus/modbus-rtu.cpp	/^static PROGMEM const uint8_t table_crc_hi[] = {$/;"	v	typeref:typename:PROGMEM const uint8_t[]	file:
table_crc_lo	src/libmodbus/modbus-rtu.cpp	/^static PROGMEM const uint8_t table_crc_lo[] = {$/;"	v	typeref:typename:PROGMEM const uint8_t[]	file:
_modbus_set_slave	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_set_slave(modbus_t *ctx, int slave)$/;"	f	typeref:typename:int	file:
_modbus_rtu_build_request_basis	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_build_request_basis(modbus_t *ctx, int function,$/;"	f	typeref:typename:int	file:
_modbus_rtu_build_response_basis	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_build_response_basis(sft_t *sft, uint8_t *rsp)$/;"	f	typeref:typename:int	file:
crc16	src/libmodbus/modbus-rtu.cpp	/^static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)$/;"	f	typeref:typename:uint16_t	file:
_modbus_rtu_prepare_response_tid	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_prepare_response_tid(const uint8_t *req, int *req_length)$/;"	f	typeref:typename:int	file:
_modbus_rtu_send_msg_pre	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_send_msg_pre(uint8_t *req, int req_length)$/;"	f	typeref:typename:int	file:
win32_ser_init	src/libmodbus/modbus-rtu.cpp	/^static void win32_ser_init(struct win32_ser *ws)$/;"	f	typeref:typename:void	file:
win32_ser_select	src/libmodbus/modbus-rtu.cpp	/^static int win32_ser_select(struct win32_ser *ws, int max_len,$/;"	f	typeref:typename:int	file:
win32_ser_read	src/libmodbus/modbus-rtu.cpp	/^static int win32_ser_read(struct win32_ser *ws, uint8_t *p_msg,$/;"	f	typeref:typename:int	file:
_modbus_rtu_ioctl_rts	src/libmodbus/modbus-rtu.cpp	/^static void _modbus_rtu_ioctl_rts(modbus_t *ctx, int on)$/;"	f	typeref:typename:void	file:
_modbus_rtu_send	src/libmodbus/modbus-rtu.cpp	/^static ssize_t _modbus_rtu_send(modbus_t *ctx, const uint8_t *req, int req_length)$/;"	f	typeref:typename:ssize_t	file:
_modbus_rtu_receive	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_receive(modbus_t *ctx, uint8_t *req)$/;"	f	typeref:typename:int	file:
_modbus_rtu_recv	src/libmodbus/modbus-rtu.cpp	/^static ssize_t _modbus_rtu_recv(modbus_t *ctx, uint8_t *rsp, int rsp_length)$/;"	f	typeref:typename:ssize_t	file:
_modbus_rtu_pre_check_confirmation	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_pre_check_confirmation(modbus_t *ctx, const uint8_t *req,$/;"	f	typeref:typename:int	file:
_modbus_rtu_check_integrity	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_check_integrity(modbus_t *ctx, uint8_t *msg,$/;"	f	typeref:typename:int	file:
_modbus_rtu_connect	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_connect(modbus_t *ctx)$/;"	f	typeref:typename:int	file:
modbus_rtu_set_serial_mode	src/libmodbus/modbus-rtu.cpp	/^int modbus_rtu_set_serial_mode(modbus_t *ctx, int mode)$/;"	f	typeref:typename:int
modbus_rtu_get_serial_mode	src/libmodbus/modbus-rtu.cpp	/^int modbus_rtu_get_serial_mode(modbus_t *ctx)$/;"	f	typeref:typename:int
modbus_rtu_get_rts	src/libmodbus/modbus-rtu.cpp	/^int modbus_rtu_get_rts(modbus_t *ctx)$/;"	f	typeref:typename:int
modbus_rtu_set_rts	src/libmodbus/modbus-rtu.cpp	/^int modbus_rtu_set_rts(modbus_t *ctx, int mode)$/;"	f	typeref:typename:int
modbus_rtu_set_custom_rts	src/libmodbus/modbus-rtu.cpp	/^int modbus_rtu_set_custom_rts(modbus_t *ctx, void (*set_rts) (modbus_t *ctx, int on))$/;"	f	typeref:typename:int
modbus_rtu_get_rts_delay	src/libmodbus/modbus-rtu.cpp	/^int modbus_rtu_get_rts_delay(modbus_t *ctx)$/;"	f	typeref:typename:int
modbus_rtu_set_rts_delay	src/libmodbus/modbus-rtu.cpp	/^int modbus_rtu_set_rts_delay(modbus_t *ctx, int us)$/;"	f	typeref:typename:int
_modbus_rtu_close	src/libmodbus/modbus-rtu.cpp	/^static void _modbus_rtu_close(modbus_t *ctx)$/;"	f	typeref:typename:void	file:
_modbus_rtu_flush	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_flush(modbus_t *ctx)$/;"	f	typeref:typename:int	file:
_modbus_rtu_select	src/libmodbus/modbus-rtu.cpp	/^static int _modbus_rtu_select(modbus_t *ctx, fd_set *rset,$/;"	f	typeref:typename:int	file:
_modbus_rtu_free	src/libmodbus/modbus-rtu.cpp	/^static void _modbus_rtu_free(modbus_t *ctx) {$/;"	f	typeref:typename:void	file:
_modbus_rtu_backend	src/libmodbus/modbus-rtu.cpp	/^const modbus_backend_t _modbus_rtu_backend = {$/;"	v	typeref:typename:const modbus_backend_t
modbus_new_rtu	src/libmodbus/modbus-rtu.cpp	/^modbus_t* modbus_new_rtu(RS485Class *rs485, unsigned long baud, uint16_t config)$/;"	f	typeref:typename:modbus_t *
OS_WIN32	src/libmodbus/modbus-tcp.cpp	/^# define OS_WIN32$/;"	d	file:
WINVER	src/libmodbus/modbus-tcp.cpp	/^# define WINVER /;"	d	file:
SHUT_RDWR	src/libmodbus/modbus-tcp.cpp	/^# define SHUT_RDWR /;"	d	file:
close	src/libmodbus/modbus-tcp.cpp	/^# define close closes/;"	d	file:
printf	src/libmodbus/modbus-tcp.cpp	/^#define printf(/;"	d	file:
fprintf	src/libmodbus/modbus-tcp.cpp	/^#define fprintf(/;"	d	file:
OS_BSD	src/libmodbus/modbus-tcp.cpp	/^# define OS_BSD$/;"	d	file:
MSG_NOSIGNAL	src/libmodbus/modbus-tcp.cpp	/^#define MSG_NOSIGNAL /;"	d	file:
MSG_DONTWAIT	src/libmodbus/modbus-tcp.cpp	/^#define MSG_DONTWAIT /;"	d	file:
EIO	src/libmodbus/modbus-tcp.cpp	/^#define EIO /;"	d	file:
EINVAL	src/libmodbus/modbus-tcp.cpp	/^#define EINVAL /;"	d	file:
ENOPROTOOPT	src/libmodbus/modbus-tcp.cpp	/^#define ENOPROTOOPT /;"	d	file:
ECONNREFUSED	src/libmodbus/modbus-tcp.cpp	/^#define ECONNREFUSED /;"	d	file:
ETIMEDOUT	src/libmodbus/modbus-tcp.cpp	/^#define ETIMEDOUT /;"	d	file:
ENOTSUP	src/libmodbus/modbus-tcp.cpp	/^#define ENOTSUP /;"	d	file:
_modbus_tcp_init_win32	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_init_win32(void)$/;"	f	typeref:typename:int	file:
_modbus_set_slave	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_set_slave(modbus_t *ctx, int slave)$/;"	f	typeref:typename:int	file:
_modbus_tcp_build_request_basis	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_build_request_basis(modbus_t *ctx, int function,$/;"	f	typeref:typename:int	file:
_modbus_tcp_build_response_basis	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_build_response_basis(sft_t *sft, uint8_t *rsp)$/;"	f	typeref:typename:int	file:
_modbus_tcp_prepare_response_tid	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_prepare_response_tid(const uint8_t *req, int *req_length)$/;"	f	typeref:typename:int	file:
_modbus_tcp_send_msg_pre	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_send_msg_pre(uint8_t *req, int req_length)$/;"	f	typeref:typename:int	file:
_modbus_tcp_send	src/libmodbus/modbus-tcp.cpp	/^static ssize_t _modbus_tcp_send(modbus_t *ctx, const uint8_t *req, int req_length)$/;"	f	typeref:typename:ssize_t	file:
_modbus_tcp_receive	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_receive(modbus_t *ctx, uint8_t *req) {$/;"	f	typeref:typename:int	file:
_modbus_tcp_recv	src/libmodbus/modbus-tcp.cpp	/^static ssize_t _modbus_tcp_recv(modbus_t *ctx, uint8_t *rsp, int rsp_length) {$/;"	f	typeref:typename:ssize_t	file:
_modbus_tcp_check_integrity	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_check_integrity(modbus_t *ctx, uint8_t *msg, const int msg_length)$/;"	f	typeref:typename:int	file:
_modbus_tcp_pre_check_confirmation	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_pre_check_confirmation(modbus_t *ctx, const uint8_t *req,$/;"	f	typeref:typename:int	file:
_modbus_tcp_set_ipv4_options	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_set_ipv4_options(int s)$/;"	f	typeref:typename:int	file:
_connect	src/libmodbus/modbus-tcp.cpp	/^static int _connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen,$/;"	f	typeref:typename:int	file:
_modbus_tcp_connect	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_connect(modbus_t *ctx)$/;"	f	typeref:typename:int	file:
_modbus_tcp_pi_connect	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_pi_connect(modbus_t *ctx)$/;"	f	typeref:typename:int	file:
_modbus_tcp_close	src/libmodbus/modbus-tcp.cpp	/^static void _modbus_tcp_close(modbus_t *ctx)$/;"	f	typeref:typename:void	file:
_modbus_tcp_flush	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_flush(modbus_t *ctx)$/;"	f	typeref:typename:int	file:
modbus_tcp_listen	src/libmodbus/modbus-tcp.cpp	/^int modbus_tcp_listen(modbus_t *ctx)$/;"	f	typeref:typename:int
modbus_tcp_pi_listen	src/libmodbus/modbus-tcp.cpp	/^int modbus_tcp_pi_listen(modbus_t *ctx, int nb_connection)$/;"	f	typeref:typename:int
modbus_tcp_accept	src/libmodbus/modbus-tcp.cpp	/^int modbus_tcp_accept(modbus_t *ctx, arduino::Client* client)$/;"	f	typeref:typename:int
modbus_tcp_pi_accept	src/libmodbus/modbus-tcp.cpp	/^int modbus_tcp_pi_accept(modbus_t *ctx, int *s)$/;"	f	typeref:typename:int
_modbus_tcp_select	src/libmodbus/modbus-tcp.cpp	/^static int _modbus_tcp_select(modbus_t *ctx, fd_set *rset, struct timeval *tv, int length_to_rea/;"	f	typeref:typename:int	file:
_modbus_tcp_free	src/libmodbus/modbus-tcp.cpp	/^static void _modbus_tcp_free(modbus_t *ctx) {$/;"	f	typeref:typename:void	file:
_modbus_tcp_backend	src/libmodbus/modbus-tcp.cpp	/^const modbus_backend_t _modbus_tcp_backend = {$/;"	v	typeref:typename:const modbus_backend_t
_modbus_tcp_pi_backend	src/libmodbus/modbus-tcp.cpp	/^const modbus_backend_t _modbus_tcp_pi_backend = {$/;"	v	typeref:typename:const modbus_backend_t
modbus_new_tcp	src/libmodbus/modbus-tcp.cpp	/^modbus_t* modbus_new_tcp(arduino::Client* client, arduino::IPAddress ip_address, int port)$/;"	f	typeref:typename:modbus_t *
modbus_new_tcp_pi	src/libmodbus/modbus-tcp.cpp	/^modbus_t* modbus_new_tcp_pi(const char *node, const char *service)$/;"	f	typeref:typename:modbus_t *
MODBUS_H	src/libmodbus/modbus.h	/^#define MODBUS_H$/;"	d
MODBUS_API	src/libmodbus/modbus.h	/^#  define MODBUS_API /;"	d
MODBUS_API	src/libmodbus/modbus.h	/^#  define MODBUS_API /;"	d
MODBUS_API	src/libmodbus/modbus.h	/^# define MODBUS_API$/;"	d
MODBUS_BEGIN_DECLS	src/libmodbus/modbus.h	/^# define MODBUS_BEGIN_DECLS /;"	d
MODBUS_END_DECLS	src/libmodbus/modbus.h	/^# define MODBUS_END_DECLS /;"	d
MODBUS_BEGIN_DECLS	src/libmodbus/modbus.h	/^# define MODBUS_BEGIN_DECLS$/;"	d
MODBUS_END_DECLS	src/libmodbus/modbus.h	/^# define MODBUS_END_DECLS$/;"	d
FALSE	src/libmodbus/modbus.h	/^#define FALSE /;"	d
TRUE	src/libmodbus/modbus.h	/^#define TRUE /;"	d
MODBUS_FC_READ_COILS	src/libmodbus/modbus.h	/^#define MODBUS_FC_READ_COILS /;"	d
MODBUS_FC_READ_DISCRETE_INPUTS	src/libmodbus/modbus.h	/^#define MODBUS_FC_READ_DISCRETE_INPUTS /;"	d
MODBUS_FC_READ_HOLDING_REGISTERS	src/libmodbus/modbus.h	/^#define MODBUS_FC_READ_HOLDING_REGISTERS /;"	d
MODBUS_FC_READ_INPUT_REGISTERS	src/libmodbus/modbus.h	/^#define MODBUS_FC_READ_INPUT_REGISTERS /;"	d
MODBUS_FC_WRITE_SINGLE_COIL	src/libmodbus/modbus.h	/^#define MODBUS_FC_WRITE_SINGLE_COIL /;"	d
MODBUS_FC_WRITE_SINGLE_REGISTER	src/libmodbus/modbus.h	/^#define MODBUS_FC_WRITE_SINGLE_REGISTER /;"	d
MODBUS_FC_READ_EXCEPTION_STATUS	src/libmodbus/modbus.h	/^#define MODBUS_FC_READ_EXCEPTION_STATUS /;"	d
MODBUS_FC_WRITE_MULTIPLE_COILS	src/libmodbus/modbus.h	/^#define MODBUS_FC_WRITE_MULTIPLE_COILS /;"	d
MODBUS_FC_WRITE_MULTIPLE_REGISTERS	src/libmodbus/modbus.h	/^#define MODBUS_FC_WRITE_MULTIPLE_REGISTERS /;"	d
MODBUS_FC_REPORT_SLAVE_ID	src/libmodbus/modbus.h	/^#define MODBUS_FC_REPORT_SLAVE_ID /;"	d
MODBUS_FC_MASK_WRITE_REGISTER	src/libmodbus/modbus.h	/^#define MODBUS_FC_MASK_WRITE_REGISTER /;"	d
MODBUS_FC_WRITE_AND_READ_REGISTERS	src/libmodbus/modbus.h	/^#define MODBUS_FC_WRITE_AND_READ_REGISTERS /;"	d
MODBUS_BROADCAST_ADDRESS	src/libmodbus/modbus.h	/^#define MODBUS_BROADCAST_ADDRESS /;"	d
MODBUS_MAX_READ_BITS	src/libmodbus/modbus.h	/^#define MODBUS_MAX_READ_BITS /;"	d
MODBUS_MAX_WRITE_BITS	src/libmodbus/modbus.h	/^#define MODBUS_MAX_WRITE_BITS /;"	d
MODBUS_MAX_READ_REGISTERS	src/libmodbus/modbus.h	/^#define MODBUS_MAX_READ_REGISTERS /;"	d
MODBUS_MAX_WRITE_REGISTERS	src/libmodbus/modbus.h	/^#define MODBUS_MAX_WRITE_REGISTERS /;"	d
MODBUS_MAX_WR_WRITE_REGISTERS	src/libmodbus/modbus.h	/^#define MODBUS_MAX_WR_WRITE_REGISTERS /;"	d
MODBUS_MAX_WR_READ_REGISTERS	src/libmodbus/modbus.h	/^#define MODBUS_MAX_WR_READ_REGISTERS /;"	d
MODBUS_MAX_PDU_LENGTH	src/libmodbus/modbus.h	/^#define MODBUS_MAX_PDU_LENGTH /;"	d
MODBUS_MAX_ADU_LENGTH	src/libmodbus/modbus.h	/^#define MODBUS_MAX_ADU_LENGTH /;"	d
MODBUS_ENOBASE	src/libmodbus/modbus.h	/^#define MODBUS_ENOBASE /;"	d
__anonb309994c0103	src/libmodbus/modbus.h	/^enum {$/;"	g
MODBUS_EXCEPTION_ILLEGAL_FUNCTION	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_ILLEGAL_FUNCTION = 0x01,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_SLAVE_OR_SERVER_FAILURE	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_SLAVE_OR_SERVER_FAILURE,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_ACKNOWLEDGE	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_ACKNOWLEDGE,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_SLAVE_OR_SERVER_BUSY	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_SLAVE_OR_SERVER_BUSY,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_NEGATIVE_ACKNOWLEDGE	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_NEGATIVE_ACKNOWLEDGE,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_MEMORY_PARITY	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_MEMORY_PARITY,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_NOT_DEFINED	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_NOT_DEFINED,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_GATEWAY_PATH	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_GATEWAY_PATH,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_GATEWAY_TARGET	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_GATEWAY_TARGET,$/;"	e	enum:__anonb309994c0103
MODBUS_EXCEPTION_MAX	src/libmodbus/modbus.h	/^    MODBUS_EXCEPTION_MAX$/;"	e	enum:__anonb309994c0103
EMBXILFUN	src/libmodbus/modbus.h	/^#define EMBXILFUN /;"	d
EMBXILADD	src/libmodbus/modbus.h	/^#define EMBXILADD /;"	d
EMBXILVAL	src/libmodbus/modbus.h	/^#define EMBXILVAL /;"	d
EMBXSFAIL	src/libmodbus/modbus.h	/^#define EMBXSFAIL /;"	d
EMBXACK	src/libmodbus/modbus.h	/^#define EMBXACK /;"	d
EMBXSBUSY	src/libmodbus/modbus.h	/^#define EMBXSBUSY /;"	d
EMBXNACK	src/libmodbus/modbus.h	/^#define EMBXNACK /;"	d
EMBXMEMPAR	src/libmodbus/modbus.h	/^#define EMBXMEMPAR /;"	d
EMBXGPATH	src/libmodbus/modbus.h	/^#define EMBXGPATH /;"	d
EMBXGTAR	src/libmodbus/modbus.h	/^#define EMBXGTAR /;"	d
EMBBADCRC	src/libmodbus/modbus.h	/^#define EMBBADCRC /;"	d
EMBBADDATA	src/libmodbus/modbus.h	/^#define EMBBADDATA /;"	d
EMBBADEXC	src/libmodbus/modbus.h	/^#define EMBBADEXC /;"	d
EMBUNKEXC	src/libmodbus/modbus.h	/^#define EMBUNKEXC /;"	d
EMBMDATA	src/libmodbus/modbus.h	/^#define EMBMDATA /;"	d
EMBBADSLAVE	src/libmodbus/modbus.h	/^#define EMBBADSLAVE /;"	d
modbus_t	src/libmodbus/modbus.h	/^typedef struct _modbus modbus_t;$/;"	t	typeref:struct:_modbus
__anonb309994c0208	src/libmodbus/modbus.h	/^typedef struct {$/;"	s
nb_bits	src/libmodbus/modbus.h	/^    int nb_bits;$/;"	m	struct:__anonb309994c0208	typeref:typename:int
start_bits	src/libmodbus/modbus.h	/^    int start_bits;$/;"	m	struct:__anonb309994c0208	typeref:typename:int
nb_input_bits	src/libmodbus/modbus.h	/^    int nb_input_bits;$/;"	m	struct:__anonb309994c0208	typeref:typename:int
start_input_bits	src/libmodbus/modbus.h	/^    int start_input_bits;$/;"	m	struct:__anonb309994c0208	typeref:typename:int
nb_input_registers	src/libmodbus/modbus.h	/^    int nb_input_registers;$/;"	m	struct:__anonb309994c0208	typeref:typename:int
start_input_registers	src/libmodbus/modbus.h	/^    int start_input_registers;$/;"	m	struct:__anonb309994c0208	typeref:typename:int
nb_registers	src/libmodbus/modbus.h	/^    int nb_registers;$/;"	m	struct:__anonb309994c0208	typeref:typename:int
start_registers	src/libmodbus/modbus.h	/^    int start_registers;$/;"	m	struct:__anonb309994c0208	typeref:typename:int
tab_bits	src/libmodbus/modbus.h	/^    uint8_t *tab_bits;$/;"	m	struct:__anonb309994c0208	typeref:typename:uint8_t *
tab_input_bits	src/libmodbus/modbus.h	/^    uint8_t *tab_input_bits;$/;"	m	struct:__anonb309994c0208	typeref:typename:uint8_t *
tab_input_registers	src/libmodbus/modbus.h	/^    uint16_t *tab_input_registers;$/;"	m	struct:__anonb309994c0208	typeref:typename:uint16_t *
tab_registers	src/libmodbus/modbus.h	/^    uint16_t *tab_registers;$/;"	m	struct:__anonb309994c0208	typeref:typename:uint16_t *
modbus_mapping_t	src/libmodbus/modbus.h	/^} modbus_mapping_t;$/;"	t	typeref:struct:__anonb309994c0208
__anonb309994c0303	src/libmodbus/modbus.h	/^{$/;"	g
MODBUS_ERROR_RECOVERY_NONE	src/libmodbus/modbus.h	/^    MODBUS_ERROR_RECOVERY_NONE          = 0,$/;"	e	enum:__anonb309994c0303
MODBUS_ERROR_RECOVERY_LINK	src/libmodbus/modbus.h	/^    MODBUS_ERROR_RECOVERY_LINK          = (1<<1),$/;"	e	enum:__anonb309994c0303
MODBUS_ERROR_RECOVERY_PROTOCOL	src/libmodbus/modbus.h	/^    MODBUS_ERROR_RECOVERY_PROTOCOL      = (1<<2)$/;"	e	enum:__anonb309994c0303
modbus_error_recovery_mode	src/libmodbus/modbus.h	/^} modbus_error_recovery_mode;$/;"	t	typeref:enum:__anonb309994c0303
MODBUS_GET_HIGH_BYTE	src/libmodbus/modbus.h	/^#define MODBUS_GET_HIGH_BYTE(/;"	d
MODBUS_GET_LOW_BYTE	src/libmodbus/modbus.h	/^#define MODBUS_GET_LOW_BYTE(/;"	d
MODBUS_GET_INT64_FROM_INT16	src/libmodbus/modbus.h	/^#define MODBUS_GET_INT64_FROM_INT16(/;"	d
MODBUS_GET_INT32_FROM_INT16	src/libmodbus/modbus.h	/^#define MODBUS_GET_INT32_FROM_INT16(/;"	d
MODBUS_GET_INT16_FROM_INT8	src/libmodbus/modbus.h	/^#define MODBUS_GET_INT16_FROM_INT8(/;"	d
MODBUS_SET_INT16_TO_INT8	src/libmodbus/modbus.h	/^#define MODBUS_SET_INT16_TO_INT8(/;"	d
MODBUS_SET_INT32_TO_INT16	src/libmodbus/modbus.h	/^#define MODBUS_SET_INT32_TO_INT16(/;"	d
MODBUS_SET_INT64_TO_INT16	src/libmodbus/modbus.h	/^#define MODBUS_SET_INT64_TO_INT16(/;"	d
MODBUS_PRIVATE_H	src/libmodbus/modbus-private.h	/^#define MODBUS_PRIVATE_H$/;"	d
ssize_t	src/libmodbus/modbus-private.h	/^#define ssize_t /;"	d
fd_set	src/libmodbus/modbus-private.h	/^#define fd_set /;"	d
timeval	src/libmodbus/modbus-private.h	/^struct timeval {$/;"	s
tv_sec	src/libmodbus/modbus-private.h	/^    uint32_t tv_sec;$/;"	m	struct:timeval	typeref:typename:uint32_t
tv_usec	src/libmodbus/modbus-private.h	/^    uint32_t tv_usec;$/;"	m	struct:timeval	typeref:typename:uint32_t
ssize_t	src/libmodbus/modbus-private.h	/^typedef int ssize_t;$/;"	t	typeref:typename:int
_MIN_REQ_LENGTH	src/libmodbus/modbus-private.h	/^#define _MIN_REQ_LENGTH /;"	d
_REPORT_SLAVE_ID	src/libmodbus/modbus-private.h	/^#define _REPORT_SLAVE_ID /;"	d
_MODBUS_EXCEPTION_RSP_LENGTH	src/libmodbus/modbus-private.h	/^#define _MODBUS_EXCEPTION_RSP_LENGTH /;"	d
_RESPONSE_TIMEOUT	src/libmodbus/modbus-private.h	/^#define _RESPONSE_TIMEOUT /;"	d
_BYTE_TIMEOUT	src/libmodbus/modbus-private.h	/^#define _BYTE_TIMEOUT /;"	d
__anon22ae26940103	src/libmodbus/modbus-private.h	/^typedef enum {$/;"	g
_MODBUS_BACKEND_TYPE_RTU	src/libmodbus/modbus-private.h	/^    _MODBUS_BACKEND_TYPE_RTU=0,$/;"	e	enum:__anon22ae26940103
_MODBUS_BACKEND_TYPE_TCP	src/libmodbus/modbus-private.h	/^    _MODBUS_BACKEND_TYPE_TCP$/;"	e	enum:__anon22ae26940103
modbus_backend_type_t	src/libmodbus/modbus-private.h	/^} modbus_backend_type_t;$/;"	t	typeref:enum:__anon22ae26940103
__anon22ae26940203	src/libmodbus/modbus-private.h	/^typedef enum {$/;"	g
MSG_INDICATION	src/libmodbus/modbus-private.h	/^    MSG_INDICATION,$/;"	e	enum:__anon22ae26940203
MSG_CONFIRMATION	src/libmodbus/modbus-private.h	/^    MSG_CONFIRMATION$/;"	e	enum:__anon22ae26940203
msg_type_t	src/libmodbus/modbus-private.h	/^} msg_type_t;$/;"	t	typeref:enum:__anon22ae26940203
_sft	src/libmodbus/modbus-private.h	/^typedef struct _sft {$/;"	s
slave	src/libmodbus/modbus-private.h	/^    int slave;$/;"	m	struct:_sft	typeref:typename:int
function	src/libmodbus/modbus-private.h	/^    int function;$/;"	m	struct:_sft	typeref:typename:int
t_id	src/libmodbus/modbus-private.h	/^    int t_id;$/;"	m	struct:_sft	typeref:typename:int
sft_t	src/libmodbus/modbus-private.h	/^} sft_t;$/;"	t	typeref:struct:_sft
_modbus_backend	src/libmodbus/modbus-private.h	/^typedef struct _modbus_backend {$/;"	s
backend_type	src/libmodbus/modbus-private.h	/^    unsigned int backend_type;$/;"	m	struct:_modbus_backend	typeref:typename:unsigned int
header_length	src/libmodbus/modbus-private.h	/^    unsigned int header_length;$/;"	m	struct:_modbus_backend	typeref:typename:unsigned int
checksum_length	src/libmodbus/modbus-private.h	/^    unsigned int checksum_length;$/;"	m	struct:_modbus_backend	typeref:typename:unsigned int
max_adu_length	src/libmodbus/modbus-private.h	/^    unsigned int max_adu_length;$/;"	m	struct:_modbus_backend	typeref:typename:unsigned int
set_slave	src/libmodbus/modbus-private.h	/^    int (*set_slave) (modbus_t *ctx, int slave);$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(modbus_t * ctx,int slave)
build_request_basis	src/libmodbus/modbus-private.h	/^    int (*build_request_basis) (modbus_t *ctx, int function, int addr,$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(modbus_t * ctx,int function,int addr,int nb,uint8_t * req)
build_response_basis	src/libmodbus/modbus-private.h	/^    int (*build_response_basis) (sft_t *sft, uint8_t *rsp);$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(sft_t * sft,uint8_t * rsp)
prepare_response_tid	src/libmodbus/modbus-private.h	/^    int (*prepare_response_tid) (const uint8_t *req, int *req_length);$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(const uint8_t * req,int * req_length)
send_msg_pre	src/libmodbus/modbus-private.h	/^    int (*send_msg_pre) (uint8_t *req, int req_length);$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(uint8_t * req,int req_length)
send	src/libmodbus/modbus-private.h	/^    ssize_t (*send) (modbus_t *ctx, const uint8_t *req, int req_length);$/;"	m	struct:_modbus_backend	typeref:typename:ssize_t (*)(modbus_t * ctx,const uint8_t * req,int req_length)
receive	src/libmodbus/modbus-private.h	/^    int (*receive) (modbus_t *ctx, uint8_t *req);$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(modbus_t * ctx,uint8_t * req)
recv	src/libmodbus/modbus-private.h	/^    ssize_t (*recv) (modbus_t *ctx, uint8_t *rsp, int rsp_length);$/;"	m	struct:_modbus_backend	typeref:typename:ssize_t (*)(modbus_t * ctx,uint8_t * rsp,int rsp_length)
check_integrity	src/libmodbus/modbus-private.h	/^    int (*check_integrity) (modbus_t *ctx, uint8_t *msg,$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(modbus_t * ctx,uint8_t * msg,const int msg_length)
pre_check_confirmation	src/libmodbus/modbus-private.h	/^    int (*pre_check_confirmation) (modbus_t *ctx, const uint8_t *req,$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(modbus_t * ctx,const uint8_t * req,const uint8_t * rsp,int rsp_length)
connect	src/libmodbus/modbus-private.h	/^    int (*connect) (modbus_t *ctx);$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(modbus_t * ctx)
close	src/libmodbus/modbus-private.h	/^    void (*close) (modbus_t *ctx);$/;"	m	struct:_modbus_backend	typeref:typename:void (*)(modbus_t * ctx)
flush	src/libmodbus/modbus-private.h	/^    int (*flush) (modbus_t *ctx);$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(modbus_t * ctx)
select	src/libmodbus/modbus-private.h	/^    int (*select) (modbus_t *ctx, fd_set *rset, struct timeval *tv, int msg_length);$/;"	m	struct:_modbus_backend	typeref:typename:int (*)(modbus_t * ctx,fd_set * rset,struct timeval * tv,int msg_length)
free	src/libmodbus/modbus-private.h	/^    void (*free) (modbus_t *ctx);$/;"	m	struct:_modbus_backend	typeref:typename:void (*)(modbus_t * ctx)
modbus_backend_t	src/libmodbus/modbus-private.h	/^} modbus_backend_t;$/;"	t	typeref:struct:_modbus_backend
_modbus	src/libmodbus/modbus-private.h	/^struct _modbus {$/;"	s
slave	src/libmodbus/modbus-private.h	/^    int slave;$/;"	m	struct:_modbus	typeref:typename:int
s	src/libmodbus/modbus-private.h	/^    int s;$/;"	m	struct:_modbus	typeref:typename:int
debug	src/libmodbus/modbus-private.h	/^    int debug;$/;"	m	struct:_modbus	typeref:typename:int
error_recovery	src/libmodbus/modbus-private.h	/^    int error_recovery;$/;"	m	struct:_modbus	typeref:typename:int
response_timeout	src/libmodbus/modbus-private.h	/^    struct timeval response_timeout;$/;"	m	struct:_modbus	typeref:struct:timeval
byte_timeout	src/libmodbus/modbus-private.h	/^    struct timeval byte_timeout;$/;"	m	struct:_modbus	typeref:struct:timeval
backend	src/libmodbus/modbus-private.h	/^    const modbus_backend_t *backend;$/;"	m	struct:_modbus	typeref:typename:const modbus_backend_t *
backend_data	src/libmodbus/modbus-private.h	/^    void *backend_data;$/;"	m	struct:_modbus	typeref:typename:void *
MODBUS_TCP_H	src/libmodbus/modbus-tcp.h	/^#define MODBUS_TCP_H$/;"	d
__NEED_NAMESPACE__	src/libmodbus/modbus-tcp.h	/^#define __NEED_NAMESPACE__$/;"	d
arduino	src/libmodbus/modbus-tcp.h	/^namespace arduino {$/;"	n
ECONNRESET	src/libmodbus/modbus-tcp.h	/^#define ECONNRESET   WSAECONNRESET$/;"	d
ECONNREFUSED	src/libmodbus/modbus-tcp.h	/^#define ECONNREFUSED WSAECONNREFUSED$/;"	d
ETIMEDOUT	src/libmodbus/modbus-tcp.h	/^#define ETIMEDOUT    WSAETIMEDOUT$/;"	d
ENOPROTOOPT	src/libmodbus/modbus-tcp.h	/^#define ENOPROTOOPT  WSAENOPROTOOPT$/;"	d
EINPROGRESS	src/libmodbus/modbus-tcp.h	/^#define EINPROGRESS  WSAEINPROGRESS$/;"	d
MODBUS_TCP_DEFAULT_PORT	src/libmodbus/modbus-tcp.h	/^#define MODBUS_TCP_DEFAULT_PORT /;"	d
MODBUS_TCP_SLAVE	src/libmodbus/modbus-tcp.h	/^#define MODBUS_TCP_SLAVE /;"	d
MODBUS_TCP_MAX_ADU_LENGTH	src/libmodbus/modbus-tcp.h	/^#define MODBUS_TCP_MAX_ADU_LENGTH /;"	d
MODBUS_VERSION_H	src/libmodbus/modbus-version.h	/^#define MODBUS_VERSION_H$/;"	d
LIBMODBUS_VERSION_MAJOR	src/libmodbus/modbus-version.h	/^#define LIBMODBUS_VERSION_MAJOR /;"	d
LIBMODBUS_VERSION_MINOR	src/libmodbus/modbus-version.h	/^#define LIBMODBUS_VERSION_MINOR /;"	d
LIBMODBUS_VERSION_MICRO	src/libmodbus/modbus-version.h	/^#define LIBMODBUS_VERSION_MICRO /;"	d
LIBMODBUS_VERSION	src/libmodbus/modbus-version.h	/^#define LIBMODBUS_VERSION /;"	d
LIBMODBUS_VERSION_STRING	src/libmodbus/modbus-version.h	/^#define LIBMODBUS_VERSION_STRING /;"	d
LIBMODBUS_VERSION_HEX	src/libmodbus/modbus-version.h	/^#define LIBMODBUS_VERSION_HEX /;"	d
LIBMODBUS_VERSION_CHECK	src/libmodbus/modbus-version.h	/^#define LIBMODBUS_VERSION_CHECK(/;"	d
MODBUS_TCP_PRIVATE_H	src/libmodbus/modbus-tcp-private.h	/^#define MODBUS_TCP_PRIVATE_H$/;"	d
_MODBUS_TCP_HEADER_LENGTH	src/libmodbus/modbus-tcp-private.h	/^#define _MODBUS_TCP_HEADER_LENGTH /;"	d
_MODBUS_TCP_PRESET_REQ_LENGTH	src/libmodbus/modbus-tcp-private.h	/^#define _MODBUS_TCP_PRESET_REQ_LENGTH /;"	d
_MODBUS_TCP_PRESET_RSP_LENGTH	src/libmodbus/modbus-tcp-private.h	/^#define _MODBUS_TCP_PRESET_RSP_LENGTH /;"	d
_MODBUS_TCP_CHECKSUM_LENGTH	src/libmodbus/modbus-tcp-private.h	/^#define _MODBUS_TCP_CHECKSUM_LENGTH /;"	d
_modbus_tcp	src/libmodbus/modbus-tcp-private.h	/^typedef struct _modbus_tcp {$/;"	s
t_id	src/libmodbus/modbus-tcp-private.h	/^    uint16_t t_id;$/;"	m	struct:_modbus_tcp	typeref:typename:uint16_t
port	src/libmodbus/modbus-tcp-private.h	/^    int port;$/;"	m	struct:_modbus_tcp	typeref:typename:int
ip	src/libmodbus/modbus-tcp-private.h	/^    IPAddress ip;$/;"	m	struct:_modbus_tcp	typeref:typename:IPAddress
client	src/libmodbus/modbus-tcp-private.h	/^    Client* client;$/;"	m	struct:_modbus_tcp	typeref:typename:Client *
ip	src/libmodbus/modbus-tcp-private.h	/^    char ip[16];$/;"	m	struct:_modbus_tcp	typeref:typename:char[16]
modbus_tcp_t	src/libmodbus/modbus-tcp-private.h	/^} modbus_tcp_t;$/;"	t	typeref:struct:_modbus_tcp
_MODBUS_TCP_PI_NODE_LENGTH	src/libmodbus/modbus-tcp-private.h	/^#define _MODBUS_TCP_PI_NODE_LENGTH /;"	d
_MODBUS_TCP_PI_SERVICE_LENGTH	src/libmodbus/modbus-tcp-private.h	/^#define _MODBUS_TCP_PI_SERVICE_LENGTH /;"	d
_modbus_tcp_pi	src/libmodbus/modbus-tcp-private.h	/^typedef struct _modbus_tcp_pi {$/;"	s
t_id	src/libmodbus/modbus-tcp-private.h	/^    uint16_t t_id;$/;"	m	struct:_modbus_tcp_pi	typeref:typename:uint16_t
port	src/libmodbus/modbus-tcp-private.h	/^    int port;$/;"	m	struct:_modbus_tcp_pi	typeref:typename:int
node	src/libmodbus/modbus-tcp-private.h	/^    char node[_MODBUS_TCP_PI_NODE_LENGTH];$/;"	m	struct:_modbus_tcp_pi	typeref:typename:char[]
service	src/libmodbus/modbus-tcp-private.h	/^    char service[_MODBUS_TCP_PI_SERVICE_LENGTH];$/;"	m	struct:_modbus_tcp_pi	typeref:typename:char[]
modbus_tcp_pi_t	src/libmodbus/modbus-tcp-private.h	/^} modbus_tcp_pi_t;$/;"	t	typeref:struct:_modbus_tcp_pi
MODBUS_RTU_H	src/libmodbus/modbus-rtu.h	/^#define MODBUS_RTU_H$/;"	d
MODBUS_RTU_MAX_ADU_LENGTH	src/libmodbus/modbus-rtu.h	/^#define MODBUS_RTU_MAX_ADU_LENGTH /;"	d
MODBUS_RTU_PRIVATE_H	src/libmodbus/modbus-rtu-private.h	/^#define MODBUS_RTU_PRIVATE_H$/;"	d
_MODBUS_RTU_HEADER_LENGTH	src/libmodbus/modbus-rtu-private.h	/^#define _MODBUS_RTU_HEADER_LENGTH /;"	d
_MODBUS_RTU_PRESET_REQ_LENGTH	src/libmodbus/modbus-rtu-private.h	/^#define _MODBUS_RTU_PRESET_REQ_LENGTH /;"	d
_MODBUS_RTU_PRESET_RSP_LENGTH	src/libmodbus/modbus-rtu-private.h	/^#define _MODBUS_RTU_PRESET_RSP_LENGTH /;"	d
_MODBUS_RTU_CHECKSUM_LENGTH	src/libmodbus/modbus-rtu-private.h	/^#define _MODBUS_RTU_CHECKSUM_LENGTH /;"	d
ENOTSUP	src/libmodbus/modbus-rtu-private.h	/^#define ENOTSUP /;"	d
PY_BUF_SIZE	src/libmodbus/modbus-rtu-private.h	/^#define PY_BUF_SIZE /;"	d
win32_ser	src/libmodbus/modbus-rtu-private.h	/^struct win32_ser {$/;"	s
fd	src/libmodbus/modbus-rtu-private.h	/^    HANDLE fd;$/;"	m	struct:win32_ser	typeref:typename:HANDLE
buf	src/libmodbus/modbus-rtu-private.h	/^    uint8_t buf[PY_BUF_SIZE];$/;"	m	struct:win32_ser	typeref:typename:uint8_t[]
n_bytes	src/libmodbus/modbus-rtu-private.h	/^    DWORD n_bytes;$/;"	m	struct:win32_ser	typeref:typename:DWORD
_modbus_rtu	src/libmodbus/modbus-rtu-private.h	/^typedef struct _modbus_rtu {$/;"	s
baud	src/libmodbus/modbus-rtu-private.h	/^    unsigned long baud;$/;"	m	struct:_modbus_rtu	typeref:typename:unsigned long
config	src/libmodbus/modbus-rtu-private.h	/^    uint16_t config;$/;"	m	struct:_modbus_rtu	typeref:typename:uint16_t
rs485	src/libmodbus/modbus-rtu-private.h	/^    RS485Class* rs485;$/;"	m	struct:_modbus_rtu	typeref:typename:RS485Class *
confirmation_to_ignore	src/libmodbus/modbus-rtu-private.h	/^    int confirmation_to_ignore;$/;"	m	struct:_modbus_rtu	typeref:typename:int
modbus_rtu_t	src/libmodbus/modbus-rtu-private.h	/^} modbus_rtu_t;$/;"	t	typeref:struct:_modbus_rtu
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
printf	src/libmodbus/modbus.c	/^#define printf(/;"	d	file:
fprintf	src/libmodbus/modbus.c	/^#define fprintf(/;"	d	file:
EIO	src/libmodbus/modbus.c	/^#define EIO /;"	d	file:
EINVAL	src/libmodbus/modbus.c	/^#define EINVAL /;"	d	file:
ENOPROTOOPT	src/libmodbus/modbus.c	/^#define ENOPROTOOPT /;"	d	file:
ECONNREFUSED	src/libmodbus/modbus.c	/^#define ECONNREFUSED /;"	d	file:
ETIMEDOUT	src/libmodbus/modbus.c	/^#define ETIMEDOUT /;"	d	file:
ENOTSUP	src/libmodbus/modbus.c	/^#define ENOTSUP /;"	d	file:
MSG_LENGTH_UNDEFINED	src/libmodbus/modbus.c	/^#define MSG_LENGTH_UNDEFINED /;"	d	file:
libmodbus_version_major	src/libmodbus/modbus.c	/^const unsigned int libmodbus_version_major = LIBMODBUS_VERSION_MAJOR;$/;"	v	typeref:typename:const unsigned int
libmodbus_version_minor	src/libmodbus/modbus.c	/^const unsigned int libmodbus_version_minor = LIBMODBUS_VERSION_MINOR;$/;"	v	typeref:typename:const unsigned int
libmodbus_version_micro	src/libmodbus/modbus.c	/^const unsigned int libmodbus_version_micro = LIBMODBUS_VERSION_MICRO;$/;"	v	typeref:typename:const unsigned int
MAX_MESSAGE_LENGTH	src/libmodbus/modbus.c	/^#define MAX_MESSAGE_LENGTH /;"	d	file:
__anonb30999470103	src/libmodbus/modbus.c	/^typedef enum {$/;"	g	file:
_STEP_FUNCTION	src/libmodbus/modbus.c	/^    _STEP_FUNCTION,$/;"	e	enum:__anonb30999470103	file:
_STEP_META	src/libmodbus/modbus.c	/^    _STEP_META,$/;"	e	enum:__anonb30999470103	file:
_STEP_DATA	src/libmodbus/modbus.c	/^    _STEP_DATA$/;"	e	enum:__anonb30999470103	file:
_step_t	src/libmodbus/modbus.c	/^} _step_t;$/;"	t	typeref:enum:__anonb30999470103	file:
strerror	src/libmodbus/modbus.c	/^char *strerror(int errnum)$/;"	f	typeref:typename:char *
modbus_strerror	src/libmodbus/modbus.c	/^const char *modbus_strerror(int errnum) {$/;"	f	typeref:typename:const char *
_error_print	src/libmodbus/modbus.c	/^void _error_print(modbus_t *ctx, const char *context)$/;"	f	typeref:typename:void
_sleep_response_timeout	src/libmodbus/modbus.c	/^static void _sleep_response_timeout(modbus_t *ctx)$/;"	f	typeref:typename:void	file:
modbus_flush	src/libmodbus/modbus.c	/^int modbus_flush(modbus_t *ctx)$/;"	f	typeref:typename:int
compute_response_length_from_request	src/libmodbus/modbus.c	/^static unsigned int compute_response_length_from_request(modbus_t *ctx, uint8_t *req)$/;"	f	typeref:typename:unsigned int	file:
send_msg	src/libmodbus/modbus.c	/^static int send_msg(modbus_t *ctx, uint8_t *msg, int msg_length)$/;"	f	typeref:typename:int	file:
modbus_send_raw_request	src/libmodbus/modbus.c	/^int modbus_send_raw_request(modbus_t *ctx, uint8_t *raw_req, int raw_req_length)$/;"	f	typeref:typename:int
compute_meta_length_after_function	src/libmodbus/modbus.c	/^static uint8_t compute_meta_length_after_function(int function,$/;"	f	typeref:typename:uint8_t	file:
compute_data_length_after_meta	src/libmodbus/modbus.c	/^static int compute_data_length_after_meta(modbus_t *ctx, uint8_t *msg,$/;"	f	typeref:typename:int	file:
_modbus_receive_msg	src/libmodbus/modbus.c	/^int _modbus_receive_msg(modbus_t *ctx, uint8_t *msg, msg_type_t msg_type)$/;"	f	typeref:typename:int
modbus_receive	src/libmodbus/modbus.c	/^int modbus_receive(modbus_t *ctx, uint8_t *req)$/;"	f	typeref:typename:int
modbus_receive_confirmation	src/libmodbus/modbus.c	/^int modbus_receive_confirmation(modbus_t *ctx, uint8_t *rsp)$/;"	f	typeref:typename:int
check_confirmation	src/libmodbus/modbus.c	/^static int check_confirmation(modbus_t *ctx, uint8_t *req,$/;"	f	typeref:typename:int	file:
response_io_status	src/libmodbus/modbus.c	/^static int response_io_status(uint8_t *tab_io_status,$/;"	f	typeref:typename:int	file:
response_exception	src/libmodbus/modbus.c	/^static int response_exception(modbus_t *ctx, sft_t *sft,$/;"	f	typeref:typename:int	file:
modbus_reply	src/libmodbus/modbus.c	/^int modbus_reply(modbus_t *ctx, const uint8_t *req,$/;"	f	typeref:typename:int
modbus_reply_exception	src/libmodbus/modbus.c	/^int modbus_reply_exception(modbus_t *ctx, const uint8_t *req,$/;"	f	typeref:typename:int
read_io_status	src/libmodbus/modbus.c	/^static int read_io_status(modbus_t *ctx, int function,$/;"	f	typeref:typename:int	file:
modbus_read_bits	src/libmodbus/modbus.c	/^int modbus_read_bits(modbus_t *ctx, int addr, int nb, uint8_t *dest)$/;"	f	typeref:typename:int
modbus_read_input_bits	src/libmodbus/modbus.c	/^int modbus_read_input_bits(modbus_t *ctx, int addr, int nb, uint8_t *dest)$/;"	f	typeref:typename:int
read_registers	src/libmodbus/modbus.c	/^static int read_registers(modbus_t *ctx, int function, int addr, int nb,$/;"	f	typeref:typename:int	file:
modbus_read_registers	src/libmodbus/modbus.c	/^int modbus_read_registers(modbus_t *ctx, int addr, int nb, uint16_t *dest)$/;"	f	typeref:typename:int
modbus_read_input_registers	src/libmodbus/modbus.c	/^int modbus_read_input_registers(modbus_t *ctx, int addr, int nb,$/;"	f	typeref:typename:int
write_single	src/libmodbus/modbus.c	/^static int write_single(modbus_t *ctx, int function, int addr, int value)$/;"	f	typeref:typename:int	file:
modbus_write_bit	src/libmodbus/modbus.c	/^int modbus_write_bit(modbus_t *ctx, int addr, int status)$/;"	f	typeref:typename:int
modbus_write_register	src/libmodbus/modbus.c	/^int modbus_write_register(modbus_t *ctx, int addr, int value)$/;"	f	typeref:typename:int
modbus_write_bits	src/libmodbus/modbus.c	/^int modbus_write_bits(modbus_t *ctx, int addr, int nb, const uint8_t *src)$/;"	f	typeref:typename:int
modbus_write_registers	src/libmodbus/modbus.c	/^int modbus_write_registers(modbus_t *ctx, int addr, int nb, const uint16_t *src)$/;"	f	typeref:typename:int
modbus_mask_write_register	src/libmodbus/modbus.c	/^int modbus_mask_write_register(modbus_t *ctx, int addr, uint16_t and_mask, uint16_t or_mask)$/;"	f	typeref:typename:int
modbus_write_and_read_registers	src/libmodbus/modbus.c	/^int modbus_write_and_read_registers(modbus_t *ctx,$/;"	f	typeref:typename:int
modbus_report_slave_id	src/libmodbus/modbus.c	/^int modbus_report_slave_id(modbus_t *ctx, int max_dest, uint8_t *dest)$/;"	f	typeref:typename:int
_modbus_init_common	src/libmodbus/modbus.c	/^void _modbus_init_common(modbus_t *ctx)$/;"	f	typeref:typename:void
modbus_set_slave	src/libmodbus/modbus.c	/^int modbus_set_slave(modbus_t *ctx, int slave)$/;"	f	typeref:typename:int
modbus_set_error_recovery	src/libmodbus/modbus.c	/^int modbus_set_error_recovery(modbus_t *ctx,$/;"	f	typeref:typename:int
modbus_set_socket	src/libmodbus/modbus.c	/^int modbus_set_socket(modbus_t *ctx, int s)$/;"	f	typeref:typename:int
modbus_get_socket	src/libmodbus/modbus.c	/^int modbus_get_socket(modbus_t *ctx)$/;"	f	typeref:typename:int
modbus_get_response_timeout	src/libmodbus/modbus.c	/^int modbus_get_response_timeout(modbus_t *ctx, uint32_t *to_sec, uint32_t *to_usec)$/;"	f	typeref:typename:int
modbus_set_response_timeout	src/libmodbus/modbus.c	/^int modbus_set_response_timeout(modbus_t *ctx, uint32_t to_sec, uint32_t to_usec)$/;"	f	typeref:typename:int
modbus_get_byte_timeout	src/libmodbus/modbus.c	/^int modbus_get_byte_timeout(modbus_t *ctx, uint32_t *to_sec, uint32_t *to_usec)$/;"	f	typeref:typename:int
modbus_set_byte_timeout	src/libmodbus/modbus.c	/^int modbus_set_byte_timeout(modbus_t *ctx, uint32_t to_sec, uint32_t to_usec)$/;"	f	typeref:typename:int
modbus_get_header_length	src/libmodbus/modbus.c	/^int modbus_get_header_length(modbus_t *ctx)$/;"	f	typeref:typename:int
modbus_connect	src/libmodbus/modbus.c	/^int modbus_connect(modbus_t *ctx)$/;"	f	typeref:typename:int
modbus_close	src/libmodbus/modbus.c	/^void modbus_close(modbus_t *ctx)$/;"	f	typeref:typename:void
modbus_free	src/libmodbus/modbus.c	/^void modbus_free(modbus_t *ctx)$/;"	f	typeref:typename:void
modbus_set_debug	src/libmodbus/modbus.c	/^int modbus_set_debug(modbus_t *ctx, int flag)$/;"	f	typeref:typename:int
modbus_mapping_new_start_address	src/libmodbus/modbus.c	/^modbus_mapping_t* modbus_mapping_new_start_address($/;"	f	typeref:typename:modbus_mapping_t *
modbus_mapping_new	src/libmodbus/modbus.c	/^modbus_mapping_t* modbus_mapping_new(int nb_bits, int nb_input_bits,$/;"	f	typeref:typename:modbus_mapping_t *
modbus_mapping_free	src/libmodbus/modbus.c	/^void modbus_mapping_free(modbus_mapping_t *mb_mapping)$/;"	f	typeref:typename:void
strlcpy	src/libmodbus/modbus.c	/^size_t strlcpy(char *dest, const char *src, size_t dest_size)$/;"	f	typeref:typename:size_t
htonl	src/libmodbus/modbus-data.c	/^#define htonl(/;"	d	file:
htons	src/libmodbus/modbus-data.c	/^#define htons(/;"	d	file:
ntohl	src/libmodbus/modbus-data.c	/^#define ntohl(/;"	d	file:
ntohs	src/libmodbus/modbus-data.c	/^#define ntohs(/;"	d	file:
htonl	src/libmodbus/modbus-data.c	/^#define htonl(/;"	d	file:
htons	src/libmodbus/modbus-data.c	/^#define htons(/;"	d	file:
ntohl	src/libmodbus/modbus-data.c	/^#define ntohl(/;"	d	file:
ntohs	src/libmodbus/modbus-data.c	/^#define ntohs(/;"	d	file:
bswap_16	src/libmodbus/modbus-data.c	/^#  define bswap_16 /;"	d	file:
bswap_32	src/libmodbus/modbus-data.c	/^#  define bswap_32 /;"	d	file:
bswap_64	src/libmodbus/modbus-data.c	/^#  define bswap_64 /;"	d	file:
GCC_VERSION	src/libmodbus/modbus-data.c	/^#  define GCC_VERSION /;"	d	file:
bswap_32	src/libmodbus/modbus-data.c	/^#    define bswap_32 /;"	d	file:
bswap_32	src/libmodbus/modbus-data.c	/^#  define bswap_32 /;"	d	file:
bswap_16	src/libmodbus/modbus-data.c	/^#  define bswap_16 /;"	d	file:
bswap_16	src/libmodbus/modbus-data.c	/^static inline uint16_t bswap_16(uint16_t x)$/;"	f	typeref:typename:uint16_t	file:
bswap_32	src/libmodbus/modbus-data.c	/^static inline uint32_t bswap_32(uint32_t x)$/;"	f	typeref:typename:uint32_t	file:
modbus_set_bits_from_byte	src/libmodbus/modbus-data.c	/^void modbus_set_bits_from_byte(uint8_t *dest, int idx, const uint8_t value)$/;"	f	typeref:typename:void
modbus_set_bits_from_bytes	src/libmodbus/modbus-data.c	/^void modbus_set_bits_from_bytes(uint8_t *dest, int idx, unsigned int nb_bits,$/;"	f	typeref:typename:void
modbus_get_byte_from_bits	src/libmodbus/modbus-data.c	/^uint8_t modbus_get_byte_from_bits(const uint8_t *src, int idx,$/;"	f	typeref:typename:uint8_t
modbus_get_float_abcd	src/libmodbus/modbus-data.c	/^float modbus_get_float_abcd(const uint16_t *src)$/;"	f	typeref:typename:float
modbus_get_float_dcba	src/libmodbus/modbus-data.c	/^float modbus_get_float_dcba(const uint16_t *src)$/;"	f	typeref:typename:float
modbus_get_float_badc	src/libmodbus/modbus-data.c	/^float modbus_get_float_badc(const uint16_t *src)$/;"	f	typeref:typename:float
modbus_get_float_cdab	src/libmodbus/modbus-data.c	/^float modbus_get_float_cdab(const uint16_t *src)$/;"	f	typeref:typename:float
modbus_get_float	src/libmodbus/modbus-data.c	/^float modbus_get_float(const uint16_t *src)$/;"	f	typeref:typename:float
modbus_set_float_abcd	src/libmodbus/modbus-data.c	/^void modbus_set_float_abcd(float f, uint16_t *dest)$/;"	f	typeref:typename:void
modbus_set_float_dcba	src/libmodbus/modbus-data.c	/^void modbus_set_float_dcba(float f, uint16_t *dest)$/;"	f	typeref:typename:void
modbus_set_float_badc	src/libmodbus/modbus-data.c	/^void modbus_set_float_badc(float f, uint16_t *dest)$/;"	f	typeref:typename:void
modbus_set_float_cdab	src/libmodbus/modbus-data.c	/^void modbus_set_float_cdab(float f, uint16_t *dest)$/;"	f	typeref:typename:void
modbus_set_float	src/libmodbus/modbus-data.c	/^void modbus_set_float(float f, uint16_t *dest)$/;"	f	typeref:typename:void
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
Arduino Modbus Library	docs/api.md	/^# Arduino Modbus Library$/;"	c
Modbus Client	docs/api.md	/^## Modbus Client$/;"	s	chapter:Arduino Modbus Library
`client.coilRead()`	docs/api.md	/^### `client.coilRead()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.coilRead()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.coilRead()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.coilRead()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.coilRead()`
`client.discreteInputRead()`	docs/api.md	/^### `client.discreteInputRead()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.discreteInputRead()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.discreteInputRead()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.discreteInputRead()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.discreteInputRead()`
`client.holdingRegisterRead()`	docs/api.md	/^### `client.holdingRegisterRead()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.holdingRegisterRead()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.holdingRegisterRead()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.holdingRegisterRead()`
`client.inputRegisterRead()`	docs/api.md	/^### `client.inputRegisterRead()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.inputRegisterRead()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.inputRegisterRead()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.inputRegisterRead()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.inputRegisterRead()`
`client.coilWrite()`	docs/api.md	/^### `client.coilWrite()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.coilWrite()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.coilWrite()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.coilWrite()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.coilWrite()`
`client.holdingRegisterWrite()`	docs/api.md	/^### `client.holdingRegisterWrite()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.holdingRegisterWrite()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.holdingRegisterWrite()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.holdingRegisterWrite()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.holdingRegisterWrite()`
`client.registerMaskWrite()`	docs/api.md	/^### `client.registerMaskWrite()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.registerMaskWrite()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.registerMaskWrite()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.registerMaskWrite()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.registerMaskWrite()`
`client.beginTransmission()`	docs/api.md	/^### `client.beginTransmission()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.beginTransmission()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.beginTransmission()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.beginTransmission()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.beginTransmission()`
`client.write()`	docs/api.md	/^### `client.write()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.write()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.write()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.write()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.write()`
`client.endTransmission()`	docs/api.md	/^### `client.endTransmission()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.endTransmission()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.endTransmission()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.endTransmission()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.endTransmission()`
`client.requestFrom()`	docs/api.md	/^### `client.requestFrom()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.requestFrom()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.requestFrom()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.requestFrom()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.requestFrom()`
`client.available()`	docs/api.md	/^### `client.available()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.available()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.available()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.available()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.available()`
`client.read()`	docs/api.md	/^### `client.read()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.read()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.read()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.read()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.read()`
`client.lastError()`	docs/api.md	/^### `client.lastError()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.lastError()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.lastError()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.lastError()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.lastError()`
`client.end()`	docs/api.md	/^### `client.end()`$/;"	S	section:Arduino Modbus Library""Modbus Client
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.end()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.end()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.end()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""Modbus Client""`client.end()`
ModbusRTUClient Class	docs/api.md	/^## ModbusRTUClient Class$/;"	s	chapter:Arduino Modbus Library
`modbusRTUClient.begin()`	docs/api.md	/^### `modbusRTUClient.begin()`$/;"	S	section:Arduino Modbus Library""ModbusRTUClient Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusRTUClient Class""`modbusRTUClient.begin()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusRTUClient Class""`modbusRTUClient.begin()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusRTUClient Class""`modbusRTUClient.begin()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusRTUClient Class""`modbusRTUClient.begin()`
ModbusTCPClient Class	docs/api.md	/^## ModbusTCPClient Class$/;"	s	chapter:Arduino Modbus Library
`ModbusTCPClient()`	docs/api.md	/^### `ModbusTCPClient()`$/;"	S	section:Arduino Modbus Library""ModbusTCPClient Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`ModbusTCPClient()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`ModbusTCPClient()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`ModbusTCPClient()`
`modbusTCPClient.begin()`	docs/api.md	/^### `modbusTCPClient.begin()`$/;"	S	section:Arduino Modbus Library""ModbusTCPClient Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.begin()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.begin()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.begin()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.begin()`
`modbusTCPClient.connected()`	docs/api.md	/^### `modbusTCPClient.connected()`$/;"	S	section:Arduino Modbus Library""ModbusTCPClient Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.connected()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.connected()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.connected()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.connected()`
`modbusTCPClient.stop()`	docs/api.md	/^### `modbusTCPClient.stop()`$/;"	S	section:Arduino Modbus Library""ModbusTCPClient Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.stop()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.stop()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.stop()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusTCPClient Class""`modbusTCPClient.stop()`
ModbusServer Class	docs/api.md	/^## ModbusServer Class$/;"	s	chapter:Arduino Modbus Library
`modbusServer.configureCoils()`	docs/api.md	/^### `modbusServer.configureCoils()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureCoils()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureCoils()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureCoils()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureCoils()`
`modbusServer.configureDiscreteInputs()`	docs/api.md	/^### `modbusServer.configureDiscreteInputs()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureDiscreteInputs()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureDiscreteInputs()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureDiscreteInputs()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureDiscreteInputs()`
`modbusServer.configureHoldingRegisters()`	docs/api.md	/^### `modbusServer.configureHoldingRegisters()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureHoldingRegisters()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureHoldingRegisters()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureHoldingRegisters()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureHoldingRegisters()`
`modbusServer.configureInputRegisters()`	docs/api.md	/^### `modbusServer.configureInputRegisters()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureInputRegisters()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureInputRegisters()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureInputRegisters()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.configureInputRegisters()`
`modbusServer.coilRead()`	docs/api.md	/^### `modbusServer.coilRead()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.coilRead()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.coilRead()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.coilRead()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.coilRead()`
`modbusServer.discreteInputRead()`	docs/api.md	/^### `modbusServer.discreteInputRead()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.discreteInputRead()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.discreteInputRead()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.discreteInputRead()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.discreteInputRead()`
`modbusServer.holdingRegisterRead()`	docs/api.md	/^### `modbusServer.holdingRegisterRead()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.holdingRegisterRead()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.holdingRegisterRead()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.holdingRegisterRead()`
`modbusServer.inputRegisterRead()`	docs/api.md	/^### `modbusServer.inputRegisterRead()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.inputRegisterRead()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.inputRegisterRead()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.inputRegisterRead()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.inputRegisterRead()`
`modbusServer.coilWrite()`	docs/api.md	/^### `modbusServer.coilWrite()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.coilWrite()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.coilWrite()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.coilWrite()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.coilWrite()`
`modbusServer.holdingRegisterWrite()`	docs/api.md	/^### `modbusServer.holdingRegisterWrite()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.holdingRegisterWrite()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.holdingRegisterWrite()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.holdingRegisterWrite()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.holdingRegisterWrite()`
`modbusServer.registerMaskWrite()`	docs/api.md	/^### `modbusServer.registerMaskWrite()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.registerMaskWrite()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.registerMaskWrite()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.registerMaskWrite()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.registerMaskWrite()`
`modbusServer.discreteInputWrite()`	docs/api.md	/^### `modbusServer.discreteInputWrite()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.discreteInputWrite()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.discreteInputWrite()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.discreteInputWrite()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.discreteInputWrite()`
`modbusServer.writeDiscreteInputs()`	docs/api.md	/^### `modbusServer.writeDiscreteInputs()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.writeDiscreteInputs()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.writeDiscreteInputs()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.writeDiscreteInputs()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.writeDiscreteInputs()`
`modbusServer.inputRegisterWrite()`	docs/api.md	/^### `modbusServer.inputRegisterWrite()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.inputRegisterWrite()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.inputRegisterWrite()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.inputRegisterWrite()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.inputRegisterWrite()`
`modbusServer.writeInputRegisters()`	docs/api.md	/^### `modbusServer.writeInputRegisters()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.writeInputRegisters()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.writeInputRegisters()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.writeInputRegisters()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.writeInputRegisters()`
`modbusServer.poll()`	docs/api.md	/^### `modbusServer.poll()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.poll()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.poll()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.poll()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.poll()`
`modbusServer.end()`	docs/api.md	/^### `modbusServer.end()`$/;"	S	section:Arduino Modbus Library""ModbusServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.end()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.end()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.end()`
Return	docs/api.md	/^#### Return$/;"	t	subsection:Arduino Modbus Library""ModbusServer Class""`modbusServer.end()`
ModbusRTUServer Class	docs/api.md	/^## ModbusRTUServer Class$/;"	s	chapter:Arduino Modbus Library
`modbusRTUServer.begin()`	docs/api.md	/^### `modbusRTUServer.begin()`$/;"	S	section:Arduino Modbus Library""ModbusRTUServer Class
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusRTUServer Class""`modbusRTUServer.begin()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusRTUServer Class""`modbusRTUServer.begin()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusRTUServer Class""`modbusRTUServer.begin()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusRTUServer Class""`modbusRTUServer.begin()`
ModbusTCPServer	docs/api.md	/^## ModbusTCPServer$/;"	s	chapter:Arduino Modbus Library
`ModbusTCPServer()`	docs/api.md	/^### `ModbusTCPServer()`$/;"	S	section:Arduino Modbus Library""ModbusTCPServer
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`ModbusTCPServer()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`ModbusTCPServer()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`ModbusTCPServer()`
`modbusTCPServer.begin()`	docs/api.md	/^### `modbusTCPServer.begin()`$/;"	S	section:Arduino Modbus Library""ModbusTCPServer
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`modbusTCPServer.begin()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`modbusTCPServer.begin()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`modbusTCPServer.begin()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`modbusTCPServer.begin()`
`modbusTCPServer.accept()`	docs/api.md	/^### `modbusTCPServer.accept()`$/;"	S	section:Arduino Modbus Library""ModbusTCPServer
Description	docs/api.md	/^#### Description$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`modbusTCPServer.accept()`
Syntax	docs/api.md	/^#### Syntax$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`modbusTCPServer.accept()`
Parameters	docs/api.md	/^#### Parameters$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`modbusTCPServer.accept()`
Returns	docs/api.md	/^#### Returns$/;"	t	subsection:Arduino Modbus Library""ModbusTCPServer""`modbusTCPServer.accept()`
Arduino Modbus Library	docs/readme.md	/^# Arduino Modbus Library$/;"	c
Further readings	docs/readme.md	/^## Further readings$/;"	s	chapter:Arduino Modbus Library
